log_format proxyLog '$http_x_forwarded_for - [$time_local] - $request_time sec - $body_bytes_sent bytes - Websocket Disconnect';
log_format proxyLogFriend '$friendly_ips - [$time_local] - $request_time sec - $body_bytes_sent bytes - Websocket Disconnect';

log_format hostedLog '$http_x_forwarded_for - [$time_local] - $uri - static files';
log_format hostedLogFriend '$friendly_ips - [$time_local] - $uri - static files';

error_log /var/log/nginx/error.log warn;

map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
}

# dont log personal or friendly ips, replace with nickname
map $http_x_forwarded_for $friendly_ips {
    default no;
    10.0.0.1 friend1;
    10.0.0.2 friend2;
    10.0.0.3 friend3;
}

server {
    location /websocket {
        proxy_pass http://ws-multiplexor:8080/;
        # normal logs for normies
        if ($friendly_ips = no) {
            access_log /var/log/nginx/access.log proxyLog;
        }
        # personalized logs for friends
        if ($friendly_ips != no) {
            access_log /var/log/nginx/access.log proxyLogFriend;
        }

        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    location ~* \.(jpg|jpeg|png|gif|ico|css|js|ttf)$ {
        access_log off;
        add_header Vary Accept-Encoding;
        add_header Access-Control-Allow-Origin *;
        root /usr/share/nginx/html/srv;
        gzip on;
    }

    location / {
        index index.html;
        if ($friendly_ips = no) {
            access_log /var/log/nginx/access.log hostedLog;
        }
        # personalized logs for friends
        if ($friendly_ips != no) {
            access_log /var/log/nginx/access.log hostedLogFriend;
        }

        root /usr/share/nginx/html/srv;
        gzip on;
    }

    error_page 502 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html;
    }
}
